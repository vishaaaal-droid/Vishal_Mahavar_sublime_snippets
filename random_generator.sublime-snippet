<snippet>
	<content><![CDATA[
string random_string(int length,int k=0,vector<char> v={}){
    string ans;
    for(int i=0;i<length;i++){
        char c;
        if(k == 0){
            assert(!v.empty());
            c = v[random(0,v.size()-1,int)];
        }
        else{
            if(v.empty()) c = (char)('a'+random(0,k-1,int));
            else{
                bool flag = random(0,1,int);
                if(flag) c = (char)('a'+random(0,k-1,int));
                else c = v[random(0,v.size()-1,int)];
            }
        }
        ans += c;
    }
    return ans;
}

vector<ll> random_vector(int n,ll l,ll r){
    assert(l <= r); vector<ll> v(n);
    for(int i=0;i<n;i++) v[i] = random(l,r,ll);
    return v;
}


vector<vector<int>> random_graph(int n,bool dir=0,bool tree=1,int m=0){
    vector<vector<int>> adj(n+1);
    if(tree){
        for(int i=2;i<=n;i++){
            int x = random(1,i-1,int);
            adj[x].push_back(i); if(!dir) adj[i].push_back(x);
        }
        return adj;
    }
    set<pair<int,int>> st;
    for(;st.size()<m;){
        int a = random(1,n,int); int b = random(1,n,int);
        if(a==b) continue;
        if(!dir && a>b) swap(a,b);
        st.insert({a,b});
    }
    for(auto p : st) {
        adj[p.first].push_back(p.second);
        if(!dir) adj[p.second].push_back(p.first);
    }
    return adj;
}]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>random generators</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
