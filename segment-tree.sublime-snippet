<snippet>
	<content><![CDATA[
class seg_tree{
private:
    const ll reset = 0;
    int n; bool indx; vll st;
    void createTree(int,int,int,const vll&); 
    void update(int,int,int,const ll&,const int&,const int&); 
    ll query(int,int,int,const int&,const int&); 
    #define update_operation(a,b) ${1:}
    #define merge_operation(a,b) ${2:}
    // Lazy Propagation
    // vll lazy; void lazyPush(int);
public:
    seg_tree(int,bool); seg_tree(int,const vll&,bool); 
    const ll query(int,int); const void update(int,int,ll);
};

seg_tree::seg_tree(int siz,bool indx=0) : n(siz),indx(indx){
    st.resize(siz*4+1,reset); // lazy.resize(siz*4+1,reset);
}

seg_tree::seg_tree(int siz,const vll &a,bool indx=0) : n(siz),indx(indx){
    st.resize(siz*4+1,reset); // lazy.resize(siz*4+1,reset);
    createTree(indx,n-1+indx,0,a);
}

void seg_tree::createTree(int l,int r,int i,const vll &a){
    if(l == r){
        st[i] = a[l]; return;
    }
    int mid = (r-l)/2 + l;
    createTree(l,mid,i*2+1,a); createTree(mid+1,r,i*2+2,a);
    st[i] = merge_operation(st[i*2+1],st[i*2+2]);
}

// void seg_tree::lazyPush(int i){}

const ll seg_tree::query(int l,int r){
    return query(indx,n-1+indx,0,l,r);
}

ll seg_tree::query(int l,int r,int i,const int &tl,const int &tr){
    if(r < tl || l > tr) return reset;
    if(l >= tl && r <= tr) return st[i];
    int mid = (r-l)/2 + l;
    // lazyPush(i);
    return merge_operation(query(l,mid,i*2+1,tl,tr),query(mid+1,r,i*2+2,tl,tr));
}

const void seg_tree::update(int l,int r,ll val){
    assert(l == r); // remove if lazy
    // current implementation is not lazy
    update(indx,n-1+indx,0,val,l,r);
}

void seg_tree::update(int l,int r,int i,const ll &val,const int& tl,const int& tr){
    if(r < tl || l > tr) return;
    if(l >= tl && r <= tr) {st[i] = update_operation(st[i],val); return; }
    int mid = (r-l)/2 + l;
    // lazyPush(i);
    update(l,mid,i*2+1,val,tl,tr); update(mid+1,r,i*2+2,val,tl,tr);
    st[i] = merge_operation(st[i*2+1],st[i*2+2]);
}]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
<tabTrigger>segment tree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
