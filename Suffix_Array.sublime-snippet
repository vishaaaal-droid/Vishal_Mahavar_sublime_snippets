<snippet>
	<content><![CDATA[
void count_sort_suffarray(vector<int> &p,const vector<int> &c){
    int n = p.size(); vector<int> count(n,0);
    for(int i=0;i<n;i++) count[c[i]]++;
    vector<int> ind(n); ind[0]=0; 
    for(int i=1;i<n;i++) ind[i] = ind[i-1] + count[i-1];
    vector<int> p_new(n);
    for(int i=0;i<n;i++){
        p_new[ind[c[p[i]]]++] = p[i];
    }
    p = p_new;
}

vector<int> suffix_array(string s){
    s += "\$";
    int n = s.size();
    vector<int> p(n),c(n);
    {
        vector<pair<char,int>> a;
        for(int i=0;i<n;i++) a.pb({s[i],i});
        sort(all(a));
        for(int i=0;i<n;i++) p[i] = a[i].second;
        c[p[0]] = 0;
        for(int i=1;i<n;i++){
            if(a[i-1].first == a[i].first) c[p[i]] = c[p[i-1]];
            else c[p[i]] = c[p[i-1]]+1;
        }
    }
    int k = 0;
    while((1<<k) < n){
        for(int i=0;i<n;i++){
            p[i] = (p[i] + n - (1<<k))%n;
        }
        count_sort_suffarray(p,c);
        vector<int> c_new(n);
        c_new[p[0]] = 0;
        for(int i=1;i<n;i++){
            pair<int,int> prev = {c[p[i-1]],c[(p[i-1]+(1<<k))%n]};
            pair<int,int> now = {c[p[i]],c[(p[i]+(1<<k))%n]};
            if(prev == now) c_new[p[i]] = c_new[p[i-1]];
            else c_new[p[i]] = c_new[p[i-1]]+1;
        }
        c = c_new;
        k++;
    }
    return p;
}]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>suffix_array</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
